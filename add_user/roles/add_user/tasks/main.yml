---
- name: Add the new user and create ssh keys
  user:
    name: "{{ user }}"
    password: "{{ password }}"
    generate_ssh_key: yes
    ssh_key_bits: "{{ key_size }}"
    ssh_key_file: .ssh/id_rsa
    shell: /bin/bash

- name: Get SSH public key of the new user
  shell: cat /home/{{ user }}/.ssh/id_rsa.pub
  register: ssh_key
  
- name: Deploy public key of new user across all nodes
  authorized_key: 
    user: "{{ user }}"
    key: "{{ ssh_key.stdout }}"
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups['add_user'] }}" 

- debug:
    msg: "Public keys deployed. User is now authorized to SSH as themselves into other nodes without password prompt."
  run_once: true


- name: Set known hosts file
  set_fact: 
    known_hosts_file: "/home/{{ user }}/.ssh/known_hosts"


- name: Add new user as known host across all nodes
  known_hosts:
    path: "{{ known_hosts_file }}"
    name: "{{ inventory_hostname }}"
    key: "{{ inventory_hostname }} ecdsa-sha2-nistp256 {{ansible_ssh_host_key_ecdsa_public}}"
    hash_host: yes
  delegate_to: "{{ item }}"
  with_items:
   - "{{ groups['add_user'] }}"


- name: Return ownership of known hosts file to new user
  file:
    path: "{{ known_hosts_file }}"
    owner: "{{ user }}"

- debug:
    msg: "Known hosts added. User can now SSH as themselves into other nodes without initial RSA key check."
  run_once: true


- name: Get name of current sudo user running Ansible
  local_action: command whoami
  register: local_user
  become: no

- name: Get sudo user's SSH key
  shell: cat /home/{{ local_user.stdout }}/.ssh/id_rsa.pub
  register: ssh_key_local

- name: Deploy public key of sudo user to new user on all nodes
  authorized_key:
    user: "{{ user }}"
    key: "{{ ssh_key_local.stdout }}"
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups['add_user'] }}"

- debug:
    msg: "Public key of sudo user deployed. Sudo user can SSH into new user without password prompt."
  run_once: true 